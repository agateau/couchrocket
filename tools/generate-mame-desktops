#!/usr/bin/env python3
import argparse
import os
import subprocess
import sys

from collections import namedtuple
from urllib.request import urlopen

from slugify import slugify


SNAPS_URL = 'http://www.mamedb.com/snap/{rom}.png'


DESCRIPTION = """\
Generates .desktop files to start Mame roms.
"""

Config = namedtuple('Config', ['mame', 'snaps', 'destination'])


DESKTOP_TEMPLATE = """[Desktop Entry]
Version=1.0
Name={title}
Exec={mame} {rom}
Icon={snap}
"""


BLACK_LIST = {"neogeo", "qsound"}


def create_title_for_rom_dict(mame):
    print('Generating title db...')
    out = str(subprocess.check_output([mame, '-ll']), 'utf-8')
    dct = {}
    first = True
    for line in out.splitlines():
        if first:
            first = False
            continue
        rom, title = line.strip().split(' ', 1)
        title = title.strip('" ')  # Remove leading spaces and enclosing double quotes
        dct[rom] = title
    print('Done')
    return dct


class App:
    def __init__(self, config):
        self.config = config
        self.title_for_rom = create_title_for_rom_dict(config.mame)
        
    def process_dir(self, dirname):
        for filename in os.listdir(dirname):
            if filename.endswith('.zip'):
                print('Processing {}'.format(filename))
                self.process_file(os.path.join(dirname, filename))
            
    def process_file(self, filename):
        rom = os.path.basename(os.path.splitext(filename)[0])
        if not rom in self.title_for_rom:
            print('Unknown, skipping')
            return
        if rom in BLACK_LIST:
            print('Blacklisted, skipping')
            return
        snap_path = self.download_snap(rom)
        self.create_desktop(rom, snap_path)
        
    def download_snap(self, rom):
        snap_path = os.path.join(self.config.snaps, rom + '.png')
        if os.path.exists(snap_path):
            print('Snap has already been downloaded')
            return snap_path
        
        url = SNAPS_URL.format(rom=rom)
        print('Downloading snap from {}'.format(url))
        with urlopen(url) as srcf:
            with open(snap_path, 'wb') as dstf:
                dstf.write(srcf.read())
        return snap_path
    
    def create_desktop(self, rom, snap_path):
        title = self.title_for_rom[rom]
        desktop_path = os.path.join(self.config.destination, slugify(title) + '.desktop')
        print('Generating {}'.format(desktop_path))
        with open(desktop_path, 'w') as f:
            f.write(DESKTOP_TEMPLATE.format(mame=self.config.mame, title=title, rom=rom, snap=snap_path))


def main():
    parser = argparse.ArgumentParser()
    parser.description = DESCRIPTION

    parser.add_argument('-m', '--mame', dest='mame', default='mame',
        help='Mame binary to use. defaults to mame')

    parser.add_argument('-s', '--snaps', dest='snaps',
        help='Path to the snaps dir')
    
    parser.add_argument('-d', '--destination', dest='destination', default=os.getcwd(),
        help='Destination dir, defaults to current directory')

    parser.add_argument('dir_or_rom_name')

    args = parser.parse_args()
    if not os.path.isdir(args.snaps):
        parser.error('Snaps dir does not exist')
        
    config = Config(mame=args.mame, snaps=args.snaps, destination=args.destination)
    app = App(config)

    if os.path.isdir(args.dir_or_rom_name):
        app.process_dir(args.dir_or_rom_name)
    else:
        app.process_file(args.dir_or_rom_name)

    return 0


if __name__ == '__main__':
    sys.exit(main())
# vi: ts=4 sw=4 et
